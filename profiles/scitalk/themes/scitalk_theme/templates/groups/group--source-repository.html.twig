{#
/**
 * @file
 * Default theme implementation to display a group.
 *
 * Available variables:
 * - group: The group entity with limited access to object properties and
 *   methods. Only "getter" methods (method names starting with "get", "has",
 *   or "is") and a few common methods such as "id" and "label" are available.
 *   Calling other methods (such as group.delete) will result in an exception.
 * - label: The title of the group.
 * - content: All group items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the
 *   printing of a given child element.
 * - url: Direct URL of the current group.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - group: The current template type (also known as a "theming hook").
 *   - group--[type]: The current group type. For example, if the group is a
 *     "Classroom" it would result in "group--classroom". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - group--[view_mode]: The View Mode of the group; for example, a
 *     teaser would result in: "group--teaser", and full: "group--full".
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_group()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  content.field_source_repo_logo.0 ? 'has-logo': 'no-logo'
]
%}
<div{{ attributes.addClass(classes) }}>
  <div class="content-wrapper">
    {{ content.field_source_repo_logo}}
    <div class="content">
      {{ title_prefix }}
      {% if page and not content.field_source_repo_logo.0 %}
        <h1 class="page-title">{{ label }}</h1>
      {% endif %}
      {{ title_suffix }}
      <div{{ content_attributes }}>
        {{ content|without('field_source_repo_logo','field_source_repo_url') }}
        <a class="button visit-repo-button" href="{{ content.field_source_repo_url.0}}">
          <strong>{{ 'Visit '}} {{ content.field_source_repo_full_name['#items'].0.value }}</strong>
        </a>
      </div>
    </div>
  </div>
{% if page %}
  {# If there are both collections and talks, create the tabs #}
  {% if collections_view_count > 0 and talks_view_count > 0 %}
  <div class="content-from-source js-tabs">
    <ul class="tab-labels display-list js-tablist" data-hx="h3">
      <li class="js-tablist__item"><a href="#collections" class="js-tablist__link">{{ 'Collections from'|t }} {{ label }} </a></li>
      <li class="js-tablist__item"><a href="#talks" class="js-tablist__link">{{ 'Talks from'|t }} {{ label }} </a></li>
    </ul>
  {% endif %}

  {% if collections_view_count > 0 %}
    <div class="tab-content js-tabcontent" id="collections">
      <h3 class="visually-hidden">{{ 'Collections from'|t }} {{ label }}</h3>
       {{ drupal_view('scitalk_talks_by_source_repo','collections') }}
    </div>
  {% endif %}

  {% if talks_view_count > 0 %}
    <div class="tab-content js-tabcontent" id="talks">
      <h3 class="visually-hidden">{{ 'Talks from'|t }} {{ label }}</h3>
      {{ drupal_view('scitalk_talks_by_source_repo','talks') }}
    </div>
  {% endif %}

  {% if collections_view_count > 0 and talks_view_count > 0 %}
    </div>
  {% endif %}

{% endif %}

</div>
