<?php

use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Config\FileStorage;

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;


/**
*  Add Subjects taxonomy, Subject field to Talk content type 
*  and update other scitalk_base configs to enforce their dependency on scitalk_base module
*/
function scitalk_base_update_8101(&$sandbox) {
    $config_path = drupal_get_path('module', 'scitalk_base') . '/config/install';
    $source      = new FileStorage($config_path);
    
    //create TAXONOMY VOCABULARY Subjects
    $storage_config = \Drupal::entityManager()->getStorage('taxonomy_vocabulary');
    $field_storage_yml = 'taxonomy.vocabulary.subjects';
    $field_storage_id = 'subjects';
    if (!$storage_config->load($field_storage_id)) 
    {
        \Drupal::logger('scitalk_base')->notice('Create Subject taxonomy vocabulary storage');
        $storage_config_yml = $source->read($field_storage_yml);
        $storage_config->create($storage_config_yml)->save();
    }
    
    //add FIELD STORAGE for subject field
    $storage_config = \Drupal::entityManager()->getStorage('field_storage_config');
    $field_storage_yml = 'field.storage.node.field_talk_subject';
    $field_storage_id = 'node.field_talk_subject';
    if (!$storage_config->load($field_storage_id)) 
    {
        \Drupal::logger('scitalk_base')->notice('Create Subject field storage');
        $storage_config_yml = $source->read($field_storage_yml);
        $storage_config->create($storage_config_yml)->save();
    }
    
    //add FIELD subject
    $field_config = \Drupal::entityManager()->getStorage('field_config');
    $field_yml = 'field.field.node.talk.field_talk_subject';
    $field_id = 'node.talk.field_talk_subject';
    if (!$field_config->load($field_id))
    {
        \Drupal::logger('scitalk_base')->notice('Create Subject field');
        $field_config_yml = $source->read($field_yml);
        $field_config->create($field_config_yml)->save();
    }
    
    //update Subject language setting
    $lang_setting = \Drupal::entityManager()->getStorage('language_content_settings');
    $lang_setting_subjects = $lang_setting->load('taxonomy_term.subjects');
    if (!empty($lang_setting_subjects))
    {
        $lang_setting_yml = $source->read('language.content_settings.taxonomy_term.subjects');
        $entity = $lang_setting->updateFromStorageRecord($lang_setting_subjects, $lang_setting_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Subjects Language settings');
    }
    
    //create entity form display
    $entity_form = \Drupal::entityManager()->getStorage('entity_form_display');
    $org_entity_form = $entity_form->load('node.talk.default');
    if (!empty($org_entity_form))
    {
        $form_display_yml = $source->read('core.entity_form_display.node.talk.default');
        $entity = $entity_form->updateFromStorageRecord($org_entity_form, $form_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Talk entity_form_display');
    }
    
    //now update ENTITY VIEWS: default, card, page header, teaser ,mini teaser and search result
    $view_display = \Drupal::entityManager()->getStorage('entity_view_display');
    $default_view_display = $view_display->load('node.talk.default');
    if (!empty($default_view_display))
    {
        $view_display_yml = $source->read('core.entity_view_display.node.talk.default');
        $entity = $view_display->updateFromStorageRecord($default_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Talk Default entity view display');
    }
    
    $card_view_display = $view_display->load('node.talk.card');
    if (!empty($card_view_display))
    {
        $view_display_yml = $source->read('core.entity_view_display.node.talk.card');
        $entity = $view_display->updateFromStorageRecord($card_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Talk Card entity view display');
    }
    
    $header_view_display = $view_display->load('node.talk.page_header');
    if (!empty($header_view_display))
    {
        $view_display_yml = $source->read('core.entity_view_display.node.talk.page_header');
        $entity = $view_display->updateFromStorageRecord($header_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Talk Page header entity view display');
    }
    
    $teaser_view_display = $view_display->load('node.talk.teaser');
    if (!empty($teaser_view_display))
    {
        $view_display_yml = $source->read('core.entity_view_display.node.talk.teaser');
        $entity = $view_display->updateFromStorageRecord($teaser_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Talk Teaser entity view display');
    }
    
    $mini_teaser_view_display = $view_display->load('node.talk.mini_teaser');
    if (!empty($mini_teaser_view_display))
    {
        $view_display_yml = $source->read('core.entity_view_display.node.talk.mini_teaser');
        $entity = $view_display->updateFromStorageRecord($mini_teaser_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Talk Mini Teaser entity view display');
    }
    
    $search_result_view_display = $view_display->load('node.talk.search_result');
    if (!empty($search_result_view_display))
    {
        $view_display_yml = $source->read('core.entity_view_display.node.talk.search_result');
        $entity = $view_display->updateFromStorageRecord($search_result_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Talk Search header entity view display');
    }
    
    //update view modes: node card
    $view_mode = \Drupal::entityManager()->getStorage('entity_view_mode');
    $card_view_mode = $view_mode->load('node.card');
    if (!empty($card_view_mode))
    {
        $view_mode_yml = $source->read('core.entity_view_mode.node.card');
        $entity = $view_mode->updateFromStorageRecord($card_view_mode, $view_mode_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Node Card view mode');
    }
    
    //update view mode: node mini teaser
    $node_mini_teaser_view_mode = $view_mode->load('node.mini_teaser');
    if (!empty($node_mini_teaser_view_mode))
    {
        $view_mode_yml = $source->read('core.entity_view_mode.node.mini_teaser');
        $entity = $view_mode->updateFromStorageRecord($node_mini_teaser_view_mode, $view_mode_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Node Mini teaser view mode');
    }
    
    //update view mode: node page header
    $node_page_header_view_mode = $view_mode->load('node.page_header');
    if (!empty($node_page_header_view_mode))
    {
        $view_mode_yml = $source->read('core.entity_view_mode.node.page_header');
        $entity = $view_mode->updateFromStorageRecord($node_page_header_view_mode, $view_mode_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Node Page Header view mode');
    }
    
    //update view mode: node speaker name institution
    $node_speaker_institute_view_mode = $view_mode->load('node.speaker_name_institution');
    if (!empty($node_speaker_institute_view_mode))
    {
        $view_mode_yml = $source->read('core.entity_view_mode.node.speaker_name_institution');
        $entity = $view_mode->updateFromStorageRecord($node_speaker_institute_view_mode, $view_mode_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Node Speaker name + Institution view mode');
    }
    
    //update view mode: taxonomy term card
    $tax_term_card_view_mode = $view_mode->load('taxonomy_term.card');
    if (!empty($tax_term_card_view_mode))
    {
        $view_mode_yml = $source->read('core.entity_view_mode.taxonomy_term.card');
        $entity = $view_mode->updateFromStorageRecord($tax_term_card_view_mode, $view_mode_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Taxonomy Term Card view mode');
    }
    
    //update view mode: taxonomy term page header
    $tax_term_page_header_view_mode = $view_mode->load('taxonomy_term.page_header');
    if (!empty($tax_term_page_header_view_mode))
    {
        $view_mode_yml = $source->read('core.entity_view_mode.taxonomy_term.page_header');
        $entity = $view_mode->updateFromStorageRecord($tax_term_page_header_view_mode, $view_mode_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Taxonomy Term Card view mode');
    }
    
    //update view mode: taxonomy term page header
    $tax_term_teaser_view_mode = $view_mode->load('taxonomy_term.teaser');
    if (!empty($tax_term_teaser_view_mode))
    {
        $view_mode_yml = $source->read('core.entity_view_mode.taxonomy_term.teaser');
        $entity = $view_mode->updateFromStorageRecord($tax_term_teaser_view_mode, $view_mode_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Taxonomy Term Teaser view mode');
    }
    
    //update image style: scitalk preview large
    $image_style = \Drupal::entityManager()->getStorage('image_style');
    $image_style_large = $image_style->load('scitalk_preview_large');
    if (!empty($image_style_large))
    {
        $image_style_yml = $source->read('image.style.scitalk_preview_large');
        $entity = $image_style->updateFromStorageRecord($image_style_large, $image_style_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Image Style Preview Large');
    }
    
    //update image style: scitalk preview medium
    $image_style_medium = $image_style->load('scitalk_preview_medium');
    if (!empty($image_style_medium))
    {
        $image_style_yml = $source->read('image.style.scitalk_preview_medium');
        $entity = $image_style->updateFromStorageRecord($image_style_medium, $image_style_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Image Style Preview Medium');
    }
    
    //update JSON API resource override: Talk
    $json_api_resource = \Drupal::entityManager()->getStorage('jsonapi_resource_config');
    $json_api_resource_talk = $json_api_resource->load('node--talk');
    if (!empty($json_api_resource_talk))
    {
        $json_api_resource_yml = $source->read('jsonapi_extras.jsonapi_resource_config.node--talk');
        $entity = $json_api_resource->updateFromStorageRecord($json_api_resource_talk, $json_api_resource_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Talk JSON API Resource Override');
    }
    
    //create JSON API resource override: Subjects
    $json_api_resource_subject = $json_api_resource->load('taxonomy_term--subjects');
    if (!empty($json_api_resource_subject))
    {
        $json_api_resource_yml = $source->read('jsonapi_extras.jsonapi_resource_config.taxonomy_term--subjects');
        $entity = $json_api_resource->updateFromStorageRecord($json_api_resource_subject, $json_api_resource_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Subjects JSON API Resource Override');
    }
    else {
        $json_api_resource_yml = $source->read('jsonapi_extras.jsonapi_resource_config.taxonomy_term--subjects');
        $json_api_resource->create($json_api_resource_yml)->save();
        
        \Drupal::logger('scitalk_base')->notice('Created Subjects JSON API Resource Override');
    }
    
    //update user role
    $user_role = \Drupal::entityManager()->getStorage('user_role');
    $user_role_scitalk = $user_role->load('scitalk_oauth');
    if (!empty($user_role_scitalk))
    {
        $user_role_yml = $source->read('user.role.scitalk_oauth');
        $entity = $user_role->updateFromStorageRecord($user_role_scitalk, $user_role_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated SciTalk User Role');
    }
    
    //update Scitalk: default datbase search
    $view_display = \Drupal::entityManager()->getStorage('view');
    $view_display_id = 'default_search_content';
    $view_yml = 'views.view.default_search_content';
    $org_view_display = $view_display->load($view_display_id);
    if (!empty($org_view_display))
    {
        $view_display_yml = $source->read($view_yml);
        $entity = $view_display->updateFromStorageRecord($org_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated view '.  $view_display_id);
    }
    
    //add module dependency to search_api.server.database_server
    $config_factory = \Drupal::configFactory();
    $search_api_server_config = $config_factory->getEditable('search_api.server.database_server');
    $dependencies = $search_api_server_config->get('dependencies');
    $dependencies['enforced'] = ['module' => ['scitalk_base']];
    $search_api_server_config->set('dependencies', $dependencies);
    $search_api_server_config->save(TRUE);
    
    $dependencies = [];
    //add module dependency to search_api.index.default_database_index
    $search_api_index_config = $config_factory->getEditable('search_api.index.default_database_index');
    $dependencies = $search_api_index_config->get('dependencies');
    $dependencies['enforced'] = ['module' => ['scitalk_base']];
    $search_api_index_config->set('dependencies', $dependencies);
    $search_api_index_config->save(TRUE);
    
    $dependencies = [];
    //add module dependency to views.view.default_search_content
    $default_search_content_config = $config_factory->getEditable('views.view.default_search_content');
    $dependencies = $default_search_content_config->get('dependencies');
    $dependencies['enforced'] = ['module' => ['scitalk_base']];
    $default_search_content_config->set('dependencies', $dependencies);
    $default_search_content_config->save(TRUE);
}

/**
*  Update storage dependenies on scitalk_base module for Source Repository 
*  Update pathauto patterns for Talks, Collections and Series
*  Add Subject field for Collections and Series taxonomies
*/
function scitalk_base_update_8102(&$sandbox) {
    $config_path = drupal_get_path('module', 'scitalk_base') . '/config/install';
    $source      = new FileStorage($config_path);

    //add storage and field for "collection_subject"
    $storage_config = \Drupal::entityManager()->getStorage('field_storage_config');
    if (!$storage_config->load('taxonomy_term.field_collection_subject'))
    {
        $storage_config_yml = $source->read('field.storage.taxonomy_term.field_collection_subject');
        $storage_config->create($storage_config_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Created storage: field.storage.taxonomy_term.field_collection_subject');
    }

    $field_config = \Drupal::entityManager()->getStorage('field_config');
    if (!$field_config->load('taxonomy_term.collection.field_collection_subject'))
    {
        $field_config_yml = $source->read('field.field.taxonomy_term.collection.field_collection_subject');
        $field_config->create($field_config_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Created field: field.field.taxonomy_term.collection.field_collection_subject');
    }
    

    //add storage and field for "series_subject"
    $storage_config = \Drupal::entityManager()->getStorage('field_storage_config');
    if (!$storage_config->load('taxonomy_term.field_series_subject'))
    {
        $storage_config_yml = $source->read('field.storage.taxonomy_term.field_series_subject');
        $storage_config->create($storage_config_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Created storage: field.storage.taxonomy_term.field_series_subject');
    }
    

    $field_config = \Drupal::entityManager()->getStorage('field_config');
    if (!$field_config->load('taxonomy_term.series.field_series_subject'))
    {
        $field_config_yml = $source->read('field.field.taxonomy_term.series.field_series_subject');
        $field_config->create($field_config_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Created field: field.field.taxonomy_term.series.field_series_subject');
    }

    //update node.type.source_repository
    $node_type_config = \Drupal::entityManager()->getStorage('node_type');
    $source_repo_config = $node_type_config->load('source_repository');
    if (!empty($source_repo_config))
    {
        $node_type_config_yml = $source->read('node.type.source_repository');
        $entity = $node_type_config->updateFromStorageRecord($source_repo_config, $node_type_config_yml);
        $entity->save();
        
        \Drupal::logger('scitalk_base')->notice('Updated node type: node.type.source_repository');
    }
    else {
        $node_type_config_yml = $source->read('node.type.source_repository');
        $node_type_config->create($node_type_config_yml)->save();
        
        \Drupal::logger('scitalk_base')->notice('Created node type: node.type.source_repository');
    }

    //update FIELD STORAGEs
    $node_storage_list = [
        'node.field_repo_institution',
        'node.field_source_repo_full_name',
        'node.field_source_repo_logo',
        'node.field_source_repo_url',
        'node.field_talk_source',
        'taxonomy_term.field_collection_source',
        'taxonomy_term.field_series_source'
    ];

    $storage_config = \Drupal::entityManager()->getStorage('field_storage_config');
    foreach ($node_storage_list as $storage){
        $cur_storage_config = $storage_config->load($storage);
        if (!empty($cur_storage_config)) 
        {
            $storage_config_yml = $source->read('field.storage.' . $storage); 
            $entity = $storage_config->updateFromStorageRecord($cur_storage_config, $storage_config_yml);
            $entity->save();

            \Drupal::logger('scitalk_base')->notice('Updated field storage: ' . $storage);
        }
        else {
            $storage_config_yml = $source->read('field.storage.' . $storage);
            $storage_config->create($storage_config_yml)->save();
            \Drupal::logger('scitalk_base')->notice('Created field storage: ' . $storage);
        }
    }

    //update/create fields
    $fields_list = [
        'node.source_repository.field_repo_institution',
        'node.source_repository.field_source_repo_full_name',
        'node.source_repository.field_source_repo_logo',
        'node.source_repository.field_source_repo_url',
        'node.talk.field_talk_source',
        'taxonomy_term.collection.field_collection_source',
        'taxonomy_term.series.field_series_source'
    ];
    $fields_config = \Drupal::entityManager()->getStorage('field_config');
    foreach ($fields_list as $storage){
        $cur_storage_config = $fields_config->load($storage);
        if (!empty($cur_storage_config)) 
        {
            $storage_config_yml = $source->read('field.field.' . $storage); 
            $entity = $fields_config->updateFromStorageRecord($cur_storage_config, $storage_config_yml);
            $entity->save();

            \Drupal::logger('scitalk_base')->notice('Updated field : ' . $storage);
        }
        else {
            $storage_config_yml = $source->read('field.field.' . $storage);
            $fields_config->create($storage_config_yml)->save();
            \Drupal::logger('scitalk_base')->notice('Created field : ' . $storage);          
        }
    }

    //update pathauto talk alias pattern
    $pathauto_config = \Drupal::entityManager()->getStorage('pathauto_pattern');
    $talk_alias_config = $pathauto_config->load('talk_alias');
    if (!empty($talk_alias_config))
    {
        $pathauto_config_yml = $source->read('pathauto.pattern.talk_alias');
        $entity = $pathauto_config->updateFromStorageRecord($talk_alias_config, $pathauto_config_yml);
        $entity->save();
        
        \Drupal::logger('scitalk_base')->notice('Updated pathauto alias: pathauto.pattern.talk_alias');
    }
  
    //add pathauto collection alias pattern
    if (!$pathauto_config->load('collection_alias'))
    {
        $pathauto_config_yml = $source->read('pathauto.pattern.collection_alias');
        $pathauto_config->create($pathauto_config_yml)->save();
        
        \Drupal::logger('scitalk_base')->notice('Created pathauto alias: pathauto.pattern.collection_alias');
    }
    
    //add pathauto series alias pattern
    if (!$pathauto_config->load('series_aliases'))
    {
        $pathauto_config_yml = $source->read('pathauto.pattern.series_aliases');
        $pathauto_config->create($pathauto_config_yml)->save();
        
        \Drupal::logger('scitalk_base')->notice('Created pathauto alias: pathauto.pattern.series_aliases');
    }
    
}

/**
*  Update user and contact settings
*  Add user account menu
*  Add view for My Talks
*/
function scitalk_base_update_8103(&$sandbox) {
    $config_path = drupal_get_path('module', 'scitalk_base') . '/config/install';
    $source      = new FileStorage($config_path);

    $view_display = \Drupal::entityManager()->getStorage('view');
    $my_talks_view_display = $view_display->load('my_talks');
    if (empty($my_talks_view_display))
    {
        $view_display_yml = $source->read('views.view.my_talks');
        $entity = $view_display->create( $view_display_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Created views.view.my_talks');
    }

    $user_role = \Drupal::entityManager()->getStorage('user_role');
    $user_role_talk_editor = $user_role->load('talk_editor');
    if (empty($user_role_talk_editor))
    {
        $user_role_yml = $source->read('user.role.talk_editor');
        $user_role->create($user_role_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Created user.role.talk_editor');
    }
   
    //profile updates
    $profile_config_path = drupal_get_path('profile', 'scitalk') . '/config/install';
    $source      = new FileStorage($profile_config_path);
    $system_actions = $source->listAll('system.action');
    $action_storage = \Drupal::entityManager()->getStorage('action');
    foreach ($system_actions as $action) {
      $action_id = str_replace('system.action.','',$action); 
      $action_config = $action_storage->load($action_id);
      $action_yml = $source->read($action);
      if (!$action_config) {
        $action_storage->create($action_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Created ' . $action);
      }
      else {
       $action_storage->updateFromStorageRecord($action_config, $action_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Updated ' . $action);
      }
    }
    
    // $block_storage_config = \Drupal::entityManager()->getStorage('block');
    // $block_config = $block_storage_config->load('useraccountmenu');
    // if (empty($block_config))
    // {
    //     $block_storage_config_yml = $source->read('block.block.useraccountmenu');
    //     $block_storage_config->create($block_storage_config_yml)->save();
    //     \Drupal::logger('scitalk_base')->notice('Created block.block.useraccountmenu');
    // }

    \Drupal::configFactory()->getEditable('contact.settings')->set('user_default_enabled', FALSE)->save(TRUE);
    \Drupal::logger('scitalk_base')->notice('Updated contact.settings');

    \Drupal::configFactory()->getEditable('user.settings')->set('register', 'admin_only')->save(TRUE);
    \Drupal::logger('scitalk_base')->notice('Updated user.settings');

    \Drupal::configFactory()->getEditable('block.block.copyrightblock')->set('weight', -6)->save(TRUE);
    \Drupal::logger('scitalk_base')->notice('Updated block.block.copyrightblock');

    \Drupal::configFactory()->getEditable('block.block.scitalk_theme_footer')->set('weight', -8)->save(TRUE);
    \Drupal::logger('scitalk_base')->notice('Updated block.block.scitalk_theme_footer');
}

/**
*  Update view My Talks
*/
function scitalk_base_update_8104(&$sandbox) {
    $config_path = drupal_get_path('module', 'scitalk_base') . '/config/install';
    $source      = new FileStorage($config_path);

    $view_display = \Drupal::entityManager()->getStorage('view');
    $my_talks_view_display = $view_display->load('my_talks');
    if (!empty($my_talks_view_display))
    {
        $view_display_yml = $source->read('views.view.my_talks');
        $view_display->updateFromStorageRecord($my_talks_view_display, $view_display_yml)->save();
        \Drupal::logger('scitalk_base')->notice('Updated views.view.my_talks');
    }
}

/**
*  Updates to Source Repository content type
*  including renaming fields labels, adding new Institution Full Name field, updating existing Insitution field max length (Short Name)
*/
function scitalk_base_update_8105(&$sandbox) {
    $config_path = drupal_get_path('module', 'scitalk_base') . '/config/install';
    $source      = new FileStorage($config_path);
    
    //update description for source repository node type
    \Drupal::configFactory()->getEditable('node.type.source_repository')
      ->set('description', 'Repository and Institution information')
      ->save(TRUE);
    \Drupal::logger('scitalk_base')->notice('Updated Source Repository: node Description');
    
    //update source repository label for Repo short name
    //\Drupal::configFactory()->getEditable('core.base_field_override.node.source_repository.title') ->set('label', 'Repository Short Name') ->save(TRUE);
    //\Drupal::logger('scitalk_base')->notice('Updated Source Repository: Repository Short Name label');
    
    //update for source repository field Repository Institution its label and required properties
    \Drupal::configFactory()->getEditable('field.field.node.source_repository.field_repo_institution')
      ->set('label', 'Institution Short Name')
      ->set('required', TRUE)
      ->save(TRUE);
    \Drupal::logger('scitalk_base')->notice('Updated Source Repository: Institution Short Name label and Required property');
    
    //update for source repository field Repository Institution Full Name its label property
    \Drupal::configFactory()->getEditable('field.field.node.source_repository.field_source_repo_full_name')
      ->set('label', 'Repository Full Name')
      ->save(TRUE);
    \Drupal::logger('scitalk_base')->notice('Updated Source Repository: Repository Full Name label');
    
    //update for source repository field URL its link type and text properties
    \Drupal::configFactory()->getEditable('field.field.node.source_repository.field_source_repo_url')
      ->set('settings.title', 0)
      ->set('settings.link_type', 16)
      ->save(TRUE);
    \Drupal::logger('scitalk_base')->notice('Updated Source Repository: Repository Url link type and text');

 
    //update source repository entity form display
    $entity_form = \Drupal::entityTypeManager()->getStorage('entity_form_display');
    $repo_entity_form = $entity_form->load('node.source_repository.default');
    if (!empty($repo_entity_form))
    {
        $form_display_yml = $source->read('core.entity_form_display.node.source_repository.default');
        $entity = $entity_form->updateFromStorageRecord($repo_entity_form, $form_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Source Repository entity form display');
    }

    //update source repository entity view display default
    $view_display = \Drupal::entityTypeManager()->getStorage('entity_view_display');
    $default_view_display = $view_display->load('node.source_repository.default');
    if (!empty($default_view_display))
    {
        $view_display_yml = $source->read('core.entity_view_display.node.source_repository.default');
        $entity = $view_display->updateFromStorageRecord($default_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Source Repository Default entity view display');
    }

    //update source repository entity view display teaser
    $teaser_view_display = $view_display->load('node.source_repository.teaser');
    if (!empty($teaser_view_display))
    {
        $view_display_yml = $source->read('core.entity_view_display.node.source_repository.teaser');
        $entity = $view_display->updateFromStorageRecord($teaser_view_display, $view_display_yml);
        $entity->save();
        \Drupal::logger('scitalk_base')->notice('Updated Source Repository Teaser entity view display');
    }

    //add FIELD STORAGE for Source Repository Full Name
    //\Drupal::entityManager()->getStorage will be deprecated, use \Drupal::entityTypeManager()->getStorage instead
    $storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
    $field_storage_yml = 'field.storage.node.field_repo_institution_full_name';
    $field_storage_id = 'node.field_repo_institution_full_name';
    $loaded_storage_config = $storage_config->load($field_storage_id);
    if (empty($loaded_storage_config))
    {
        \Drupal::logger('scitalk_base')->notice('Created Institution Full Name field storage');
        $storage_config_yml = $source->read($field_storage_yml);
        $storage_config->create($storage_config_yml)->save();
    }
    
    //add FIELD Institution Full Name
    $field_config = \Drupal::entityTypeManager()->getStorage('field_config');
    $field_yml = 'field.field.node.source_repository.field_repo_institution_full_name';
    $field_id = 'node.source_repository.field_repo_institution_full_name';
    $loaded_field_config = $field_config->load($field_id);
    if (empty($loaded_field_config))
    {
        \Drupal::logger('scitalk_base')->notice('Created Institution Full Name field');
        $field_config_yml = $source->read($field_yml);
        $field_config->create($field_config_yml)->save();
    }

    //change field length for Institution Short Name:
    $entity_type = 'node';
    $field_name = 'field_repo_institution';
    $field_length = 20;

    // Update database schema.
    $database = \Drupal::database();
    // Resize the main field data table.
    $database->query("ALTER TABLE {$entity_type}__{$field_name} MODIFY {$field_name}_value VARCHAR({$field_length})");
    // Resize the revision field data table (if revisions are enabled).
    $database->query("ALTER TABLE {$entity_type}_revision__{$field_name} MODIFY {$field_name}_value VARCHAR({$field_length})");
    
    // Update storage schema
    $storage_key = $entity_type . '.field_schema_data.' . $field_name;
    $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
    $field_schema = $storage_schema->get($storage_key);
    $field_schema[$entity_type . '__' . $field_name]['fields'][$field_name . '_value']['length'] = $field_length;
    $field_schema[$entity_type . '_revision__' . $field_name]['fields'][$field_name . '_value']['length'] = $field_length;
    $storage_schema->set($storage_key, $field_schema);

    // Update field configuration.
    $config = \Drupal::configFactory()->getEditable("field.storage.{$entity_type}.{$field_name}");
    $config->set('settings.max_length', $field_length);
    $config->save(TRUE);

    // Update field storage configuration.
    FieldStorageConfig::loadByName($entity_type, $field_name)->save();
}
